# frozen_string_literal: true

module RubyTypeSystem
  class TokenError < StandardError; end

  Token = Struct.new(:type, :literal, :line, :column)
  module TokenType
    EOF = :EOF
    IDENTIFIER = :IDENTIFIER
    NUMERIC = :NUMERIC
    INTEGER = :INTEGER
    FLOAT = :FLOAT
    STRING = :STRING
    HEREDOC = :HEREDOC
    COMMENT = :COMMENT
    HASH = :HASH
    ARRAY = :ARRAY
    SET = :SET
    PROC = :PROC
    IO = :IO
    FILE = :FILE
    TIME = :TIME
    TRUECLASS = :TRUE_CLASS
    FALSECLASS = :FALSE_CLASS
    NILCLASS = :NIL_CLASS
    OBJECT = :OBJECT
    METHOD = :METHOD
    STRUCT = :STRUCT
    EXPRESSION = :EXPRESSION
    ASSIGN = :ASSIGN
    PLUS = :PLUS
    MINUS = :MINUS
    MULTIPLY = :MULTIPLY
    DIVIDE = :DIVIDE
    LPAREN = :LPAREN
    RPAREN = :RPAREN
    LBRACE = :LBRACE
    RBRACE = :RBRACE
    COMMA = :COMMA
    DOT = :DOT
    SEMICOLON = :SEMICOLON
    COLON = :COLON
    DOUBLE_COLON = :DOUBLE_COLON
    PIPE = :PIPE
    AMPERSAND = :AMPERSAND
    BANG = :BANG
    QUESTION = :QUESTION
    AT = :AT
    DOLLAR = :DOLLAR
    PERCENT = :PERCENT
    CARET = :CARET
    TILDE = :TILDE
    LT = :LT
    GT = :GT
    LEQ = :LEQ
    GEQ = :GEQ
    EQ = :EQ
    NEQ = :NEQ
    AND = :AND
    OR = :OR
    NOT = :NOT
    IF = :IF
    ELSE = :ELSE
    ELSIF = :ELSIF
    UNLESS = :UNLESS
    WHILE = :WHILE
    UNTIL = :UNTIL
    FOR = :FOR
    IN = :IN
    DO = :DO
    THEN = :THEN
    YIELD = :YIELD
    RETURN = :RETURN
    DEF = :DEF
    CLASS = :CLASS
    MODULE = :MODULE
    SELF = :SELF
    NIL = :NIL
    TRUE = :TRUE
    FALSE = :FALSE
    SUPER = :SUPER
    BEGIN_T = :BEGIN
    RESCUE = :RESCUE
    ENSURE = :ENSURE
    END_T = :END
    ALIAS = :ALIAS
    UNDEF = :UNDEF
    CASE = :CASE
    WHEN = :WHEN
    NEXT = :NEXT
    BREAK = :BREAK
    REDO = :REDO
    RETRY = :RETRY
    LBRACKET = :LBRACKET
    RBRACKET = :RBRACKET
    RANGE = :RANGE
    RANGE_EXCLUSIVE = :RANGE_EXCLUSIVE
    LSHIFT = :LSHIFT
    RSHIFT = :RSHIFT
    BIT_AND = :BIT_AND
    BIT_OR = :BIT_OR
    BIT_XOR = :BIT_XOR
    BIT_NOT = :BIT_NOT
    LOGICAL_AND = :LOGICAL_AND
    LOGICAL_OR = :LOGICAL_OR
    LOGICAL_NOT = :LOGICAL_NOT
    EQUAL = :EQUAL
    NOT_EQUAL = :NOT_EQUAL
    LESS_THAN = :LESS_THAN
    LESS_THAN_EQUAL = :LESS_THAN_EQUAL
    GREATER_THAN = :GREATER_THAN
    GREATER_THAN_EQUAL = :GREATER_THAN_EQUAL
    MATCH = :MATCH
    NOT_MATCH = :NOT_MATCH
    CASE_EQUAL = :CASE_EQUAL
    PLUS_EQUAL = :PLUS_EQUAL
    MINUS_EQUAL = :MINUS_EQUAL
    MULTIPLY_EQUAL = :MULTIPLY_EQUAL
    DIVIDE_EQUAL = :DIVIDE_EQUAL
    MOD_EQUAL = :MOD_EQUAL
    EXPONENTIAL_EQUAL = :EXPONENTIAL_EQUAL
    BIT_AND_EQUAL = :BIT_AND_EQUAL
    BIT_OR_EQUAL = :BIT_OR_EQUAL
    BIT_XOR_EQUAL = :BIT_XOR_EQUAL
    LSHIFT_EQUAL = :LSHIFT_EQUAL
    RSHIFT_EQUAL = :RSHIFT_EQUAL
    AND_EQUAL = :AND_EQUAL
    OR_EQUAL = :OR_EQUAL
    RANGE_INCLUSIVE = :RANGE_INCLUSIVE
    UNARY_PLUS = :UNARY_PLUS
    UNARY_MINUS = :UNARY_MINUS
    UNARY_NOT = :UNARY_NOT
    UNARY_BIT_NOT = :UNARY_BIT_NOT
    HEREDOC_BEGIN = :HEREDOC_BEGIN
    HEREDOC_END = :HEREDOC_END
    SYMBOL = :SYMBOL
    TYPE_SPEC = :TYPE_SPEC
    REGEXP = :REGEXP
    GLOBAL_VAR = :GLOBAL_VAR
    INSTANCE_VAR = :INSTANCE_VAR
    CLASS_VAR = :CLASS_VAR
    BACKTICK = :BACKTICK
    ELLIPSIS = :ELLIPSIS
    SAFE_NAVIGATOR = :SAFE_NAVIGATOR
    HASH_ROCKET = :HASH_ROCKET
    LAMBDA = :LAMBDA
    SPLAT = :SPLAT
    DOUBLE_SPLAT = :DOUBLE_SPLAT
    TRIPLE_EQUAL = :TRIPLE_EQUAL
    OPTIONAL_PARAMS = :OPTIONAL_PARAMS
    KEYWORD_PARAMS = :KEYWORD_PARAMS
    BLOCK_BEGIN = :BLOCK_BEGIN
    BLOCK_END = :BLOCK_END
    IN_PATTERN = :IN_PATTERN
    PATTERN_BEGIN = :PATTERN_BEGIN
    PATTERN_END = :PATTERN_END
    ONE_LINE_METHOD = :ONE_LINE_METHOD
  end
end
